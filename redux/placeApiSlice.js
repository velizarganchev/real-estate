import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';


export const placeApi = createApi({
    reducerPath: 'placeApi',
    baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:3000/api/' }),
    tagTypes: ['Places'],
    endpoints: (builder) => ({
        getAllPlaces: builder.query({
            query: () => "admin/places",
            providesTags: ['Places'],
        }),
        getPlace: builder.query({
            query: (id) => `places/${id}`,
            invalidatesTags: ['Places'],
        }),
        createPlace: builder.mutation({
            query: ({
                name,
                pricePerNight,
                description,
                address,
                checkIn,
                checkOut,
                guestCapacity,
                numOfBeds,
                internet,
                airConditioned,
                petsAllowed,
                parking,
                entertainment,
                kitchen,
                refrigerator,
                washer,
                dryer,
                selfCheckIn,
                images,
            }) => ({
                url: `places`,
                method: 'POST',
                body: {
                    name,
                    pricePerNight,
                    description,
                    address,
                    checkIn,
                    checkOut,
                    guestCapacity,
                    numOfBeds,
                    internet,
                    airConditioned,
                    petsAllowed,
                    parking,
                    entertainment,
                    kitchen,
                    refrigerator,
                    washer,
                    dryer,
                    selfCheckIn,
                    images,
                },
            }),
            invalidatesTags: ['Places'],
        }),
        updatePlace: builder.mutation({
            query: ({
                id,
                name,
                pricePerNight,
                description,
                address,
                checkIn,
                checkOut,
                guestCapacity,
                numOfBeds,
                internet,
                airConditioned,
                petsAllowed,
                parking,
                entertainment,
                kitchen,
                refrigerator,
                washer,
                dryer,
                selfCheckIn,
                images,
            }) => ({
                url: `places/${id}`,
                method: 'PUT',
                body: {
                    name,
                    pricePerNight,
                    description,
                    address,
                    checkIn,
                    checkOut,
                    guestCapacity,
                    numOfBeds,
                    internet,
                    airConditioned,
                    petsAllowed,
                    parking,
                    entertainment,
                    kitchen,
                    refrigerator,
                    washer,
                    dryer,
                    selfCheckIn,
                    images,
                },
            }),
            invalidatesTags: ['Places'],
        }),
        deletePlace: builder.mutation({
            query: (id) => ({
                url: `places/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: ['Places'],
        }),
    }),
});

export const {
    useGetAllPlacesQuery,
    useGetPlaceQuery,
    useCreatePlaceMutation,
    useUpdatePlaceMutation,
    useDeletePlaceMutation
} = placeApi;